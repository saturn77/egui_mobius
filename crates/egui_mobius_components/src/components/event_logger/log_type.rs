//! LogType
//!
//! This enum is used to categorize the type of log entry
//! in the terminal widget. This is used to color code the
//! log entries.
//!
//! **Contents**
//!
//! - Default variant
//! - Timestamp variant
//! - Slider variant
//! - OptionA variant
//! - OptionB variant
//! - OptionC variant
//! - CustomEvent variant
//! - RunStop variant
//!
/// The Default variant is used for general log entries
/// that do not fit into the other categories.
///
/// The Timestamp variant is used to indicate that the log
/// entry is a timestamped message.
///
/// The Slider, OptionA, OptionB, OptionC, CustomEvent, and
/// RunStop variants are used to categorize log entries
/// that are generated by the respective widgets.
///
/// The Slider variant is used for logs generated by the
/// slider widget.
///
/// The OptionA, OptionB, and OptionC variants are used for
/// logs generated by the option widgets.
///
/// The CustomEvent variant is used for logs generated by
/// custom events.
///
/// The RunStop variant is used for logs generated by the
/// run/stop widget.    
/// 
#[derive(Clone, Copy, PartialEq)]
pub enum LogType {
    Checkbox,
    Slider,
    OptionA,
    OptionB,
    OptionC,
    CustomEvent,
    RunStop,
    Default,
    Timestamp,
    Primary,
    Secondary,
}
/// Debug for LogType
/// 
/// This is used to display the LogType in the terminal widget
/// 
impl std::fmt::Debug for LogType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            LogType::Checkbox => write!(f, "Checkbox"),
            LogType::Primary => write!(f, "Primary"),
            LogType::Secondary => write!(f, "Secondary"),
            LogType::Slider => write!(f, "Slider"),
            LogType::OptionA => write!(f, "Option A"),
            LogType::OptionB => write!(f, "Option B"),
            LogType::OptionC => write!(f, "Option C"),
            LogType::CustomEvent => write!(f, "Custom Event"),
            LogType::RunStop => write!(f, "Run/Stop"),
            LogType::Default => write!(f, "Default"),
            LogType::Timestamp => write!(f, "Timestamp"),
        }
    }
}